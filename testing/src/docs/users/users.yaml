paths:
  /api/users/register:
    post:
      summary: "Register a new user"
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#components/schemas/UserRegister"
      responses:
        "200":
          description: "User registered successfully."
        "400":
          description: "Incomplete or invalid registration data."
          
  /api/users/failregister:
    get:
      summary: "Failed registration"
      tags:
        - Users
      responses:
        "200":
          description: "Failed registration response."
          
  /api/users/login:
    post:
      summary: "User login"
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#components/schemas/UserLogin"
      responses:
        "200":
          description: "User logged in successfully."
        "400":
          description: "Incomplete or invalid login data."
          
  /api/users/logout:
    post:
      summary: "Logout"
      tags:
        - Users
      responses:
        "200":
          description: "User logged out successfully."
          
  /api/users/restartPassword:
    post:
      summary: "Restart user password"
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#components/schemas/UserRestartPassword"
      responses:
        "200":
          description: "Password reset successfully."
        "400":
          description: "Incomplete or invalid data."
        "404":
          description: "User not found."
          
  /api/users/checkUserByEmail:
    get:
      summary: "Check user by email"
      tags:
        - Users
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "User found successfully."
          content:
            application/json:
              schema:
                $ref: "#components/schemas/User"
        "404":
          description: "User not found."
          
  /api/users/restartMailPassword:
    get:
      summary: "Restart user password via email"
      tags:
        - Users
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Password recovery email sent successfully."
        "400":
          description: "Email address not provided."
        "500":
          description: "Error sending email."
          
  /api/users/cartId:
    get:
      summary: "Get user cart ID"
      tags:
        - Users
      responses:
        "200":
          description: "User cart ID obtained successfully."
          
  /api/users/myCart:
    get:
      summary: "Get user cart details"
      tags:
        - Users
      responses:
        "200":
          description: "User cart details obtained successfully."
          
  /api/users/premium/{uid}:
    post:
      summary: "Toggle user premium status"
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "User premium status updated successfully."
        "404":
          description: "User not found."
        "500":
          description: "Server error."
          
  /api/users/{uid}/documents:
    post:
      summary: "Upload documents for a user"
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#components/schemas/UserDocuments"
      responses:
        "200":
          description: "Documents uploaded successfully."
        "404":
          description: "User not found."
          
components:
  schemas:
    User:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        age:
          type: number
        password:
          type: string
        carts:
          type: array
          items:
            type: string
            format: uuid
        rol:
          type: string
          default: "user"
        documents:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              ref:
                type: string
        last_connection:
          type: string
      required:
        - first_name
        - last_name
        - email
        - age
        - password
